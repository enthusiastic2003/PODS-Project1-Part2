package com.sirjanhansda.pods.products.model;

import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import lombok.Data;
import lombok.Getter;
import lombok.Setter;

import java.util.List;

/**
 * This class represents an order placed by a user. It is annotated with @Entity, making it a JPA entity
 * that will be mapped to a database table. The class contains the following fields:
 * - order_id (Integer): The unique identifier for the order, automatically generated with 
 *   @GeneratedValue using the IDENTITY strategy (auto-increment).
 * - user_id (Integer): The unique identifier of the user who placed the order.
 * - total_price (Integer): The total price of the order.
 * - status (OrderStatus): The current status of the order, represented by an enum. The @Enumerated 
 *   annotation with EnumType.STRING ensures the enum is stored as a string in the database.
 * - items (List<OrderItem>): A list of order items associated with the order. The @OneToMany 
 *   annotation specifies that one order can have many order items. The mappedBy attribute 
 *   specifies that the relationship is mapped by the `order` field in the `OrderItem` class.
 *   The cascade = CascadeType.ALL ensures that operations like persist, merge, and delete on an order 
 *   are propagated to the associated order items. The fetch = FetchType.EAGER ensures that the order 
 *   items are loaded eagerly when the order is retrieved.
 *
 * The @JsonManagedReference annotation is used to manage the bidirectional relationship between
 * the `Orders` and `OrderItem` classes, ensuring that the order items are serialized properly when 
 * converting the order to JSON.
 *
 * The @Data, @Getter, and @Setter annotations from Lombok automatically generate boilerplate code 
 * such as getter, setter, equals, hashcode, and toString methods.
 */
@Entity
@Data
@Getter
@Setter
public class Orders {

    // Unique identifier for the order (auto-generated by the database)
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer order_id;

    // The unique identifier of the user who placed the order
    private Integer user_id;

    // The total price of the order
    private Integer total_price;

    // The status of the order (e.g., PENDING, COMPLETED, CANCELLED)
    @Enumerated(EnumType.STRING)
    private OrderStatus status;

    // The list of order items associated with the order (One-to-Many relationship)
    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    @JsonManagedReference // Ensures proper serialization of the bidirectional relationship
    private List<OrderItem> items;
}
